import { Order, PaymentProvider, Shop, Transaction } from '@/payload-types'
import { PaymentProviders } from '../lib/constants'
import { CheckoutData } from '@/types/checkout'
import { SearchParams } from '@/types/next'

/**
 * Provider keys (extend as you add providers)
 */
export type PaymentProviderName = (typeof PaymentProviders)[number]

/**
 * Strong TS types mirroring the DB shape (one group per provider)
 */
export type KhaltiSettings = PaymentProvider['khalti']

export type KhaltiConfig = NonNullable<KhaltiSettings['config']>

export type KhaltiSessionData = {
  /**
   * Total payable amount excluding service charge
   * Must be in paisa
   */
  amount: number
  /**
   * Unique identifier for the transaction generated by merchant
   * The transaction Id
   */
  purchase_order_id: string
  /**
   * Name of the product.
   */
  purchase_order_name: string
  /**
   * The URL of the website.
   */
  website_url: string
  /**
   * Page to return to after transaction
   */
  return_url: string
}

export type KhaltiCallbackData = {
  /**
   * The initial payment identifier
   */
  pidx: string

  /**
   * Status of the transaction
   *  Completed - Transaction is success
   *  Pending - Transaction is in pending state, request for lookup API.
   *  User canceled - Transaction has been canceled by user.
   */
  status: 'Completed' | 'Pending' | 'User canceled'

  /**
   * The transaction identifier at Khalti
   */
  transaction_id: string

  /**
   * The initial purchase_order_id provided during payment initiate
   * This is the native transaction id
   */
  purchase_order_id: string
}

export type KhaltiSessionArgs = {
  name: 'khalti'
  config: KhaltiConfig
  data: KhaltiSessionData
}

export type KhaltiLookupArgs = {
  name: 'khalti'
  config: KhaltiConfig
  data: KhaltiCallbackData
}

export type KhaltiLookupStatus =
  | 'Completed'
  | 'Pending'
  | 'Initiated'
  | 'Refunded'
  | 'Expired'
  | 'User canceled'

export type PaymentProviderSessionArgs = KhaltiSessionArgs // Create a Descriminated Union of different providers when added
export type PaymentProviderLookupArgs = KhaltiLookupArgs // Create a Descriminated Union of different providers when added

/**
 * Payment handlers (modular, no UI registry). Users enable providers via collection.
 */
export type CheckoutArgs = {
  amountPaisa: number
  orderId: string
  orderName: string
  websiteUrl: string
  returnUrl: string
  customer?: { name?: string; email?: string; phone?: string }
}

export type CheckoutSessionCreateData = {
  shop: Shop
  paymentDoc: PaymentProvider
  checkoutData: CheckoutData
  order: Order
  transaction: Transaction
}

export type LookupArgsCreateData = {
  paymentProvider: PaymentProviderName
  paymentDoc: PaymentProvider
  params: SearchParams
}

export type ProviderHandler = {
  createCheckoutSession: (
    args: PaymentProviderSessionArgs,
  ) => Promise<{ redirectUrl: string; reference?: string; raw?: unknown }>
  lookup: (
    args: PaymentProviderLookupArgs,
  ) => Promise<{ status: Transaction['status']; raw?: unknown }>
}
